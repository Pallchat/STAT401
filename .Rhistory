a = 1
b = 1
a+b =
a = 1
a = 1
b = 2
a+b
x = 1:10
y = rep(c(1,2), each=5)
x =
x=
x =
x
x = 1:10
y = rep(c(1,2), each=5)
m = lm(y~x)
s = summary(m)
x
y
m
s
1*2
(1+3)*2 + 100^2
sin(2*pi)
sqrt(4)
10^2
log(10)
log(10, base=10)
a <- 1
2 -> b
c = 3
a
b
c
length <- 4
width  <- 3
area <- length * width
area
radius <- 2
area   <- pi*radius^2 # this overwrites the previous `area` variable
circumference <- 2*pi*radius
area
circumference
opposite     <- 1
angleDegrees <- 30
angleRadians <- angleDegrees * pi/180
(adjacent     <- opposite / tan(angleRadians)) # = sqrt(3)
(hypotenuse   <- opposite / sin(angleRadians)) # = 2
angleRadians <- 90 * pi/180
a = c(1,2,-5,3.6)
b = c("STAT","401", "(Eng)")
c = c(TRUE, FALSE, TRUE, TRUE)
a
class(a)
length abbreviate(a)
length (a)
m1 = cbind(c(1,2), c(3,4))       # Column bind
m2 = rbind(c(1,3), c(2,4))       # Row bind
m1 = cbind(c(1,2), c(3,4))       # Column bind
m2 = rbind(c(1,3), c(2,4))       # Row bind
m1
all.equal(m1, m2)
m3 = matrix(1:4, nrow = 2, ncol = 2)
all.equal(m1, m3)
m4 = matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)
all.equal(m3, m4)
m3
m4
m1 = cbind(c(1,2), c(3,4))       # Column bind
m2 = rbind(c(1,3), c(2,4))       # Row bind
m1
m2
m = matrix(1:12, nrow=3, ncol=4)
m
m = matrix(1:12, nrow=3, ncol=4)
m
m[1:2,3:4]
m[1:2,]
m[-c(3,4),]
n <- 13
p <- 0.7
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")
?dbinom
dbinom(0, size = n, prob = p)
dbinom(x, size = n, prob = p)
plot(x, pbinom(x, size = n, prob = p), type="s", main = "Cumulative distribution function for Bin(13,0.7)")
p_seq <- seq(from = 0, to = 1, length = 101)
plot(p_seq, qbinom(p_seq, size = n, prob = p), type="s", main = "Quantile function for Bin(13,0.7)")
draws <- rbinom(100, size = n, prob = p) # draw 100
brks  <- (0:(n+1)) - 0.5
hist(draws, breaks = brks, main = "Random draws from Bin(13,0.7)")
set.seed(1)
draws <- rbinom(100, size = n, prob = p) # draw 100
draws
brks  <- (0:(n+1)) - 0.5
hist(draws, breaks = brks, main = "Random draws from Bin(13,0.7)")
hist(draws, breaks = brks, probability = TRUE)
points(x, dbinom(x, size = n, prob = p), col="red")
n <- 39
p <- 0.25
x <- 0:n
plot(x, dbinom(x, size = n, prob = p),                     main = 'Probability mass function for Bin(39,0.25)')
plot(x, pbinom(x, size = n, prob = p), type="s", main = "Cumulative distribution function for Bin(39,0.25)")
p_seq <- seq(from = 0, to = 1, length = 101)
plot(p_seq, qbinom(p_seq, size = n, prob = p), type="s", main = "Quantile function for Bin(39,0.25)")
draws <- rbinom(100, size = n, prob = p) # draw 100
brks  <- (0:(n+1)) - 0.5
hist(draws, breaks = brks, main = "Random draws from Bin(39,0.25)")
hist(draws, breaks = brks, probability = TRUE)
points(x, dbinom(x, size = n, prob = p), col="yellow")
hist(draws, breaks = brks, probability = TRUE)
points(x, dbinom(x, size = n, prob = p), col="blue")
rate <- 2
x <- 0:10 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2)")
rate <- 2
x <- 0:10 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2), col="red)
p_seq <- seq(from = 0, to = 100, length = 200)
plot(p_seq, qbinom(p_seq, size = n, prob = p), type="s", main = "Quantile function for Bin(39,0.25)")
p_seq <- seq(from = 0, to = 1, length = 101)
plot(p_seq, qbinom(p_seq, size = n, prob = p), type="s", main = "Quantile function for Bin(39,0.25)")
p_seq
rate <- 2
x <- 0:10 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2)")
plot(x, ppois(x, lambda = rate), type="s", main = "Cumulative distribution function for Po(2)")
plot(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,10), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
draws <- rpois(100, lambda = rate)
hist(draws, breaks = (0:(max(draws)+1)) - 0.5, probability = TRUE, main = "Random draws from Po(s)")
points(x, dpois(x, lambda = rate), col="red")
draws <- rpois(1000, lambda = rate)
hist(draws, breaks = (0:(max(draws)+1)) - 0.5, probability = TRUE, main = "Random draws from Po(s)")
points(x, dpois(x, lambda = rate), col="red")
rate <- 23
x <- 0:10 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2)")
plot(x, ppois(x, lambda = rate), type="s", main = "Cumulative distribution function for Po(2)")
plot(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,10), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
draws <- rpois(99, lambda = rate)
hist(draws, breaks = (0:(max(draws)+1)) - 0.5, probability = TRUE, main = "Random draws from Po(s)")
points(x, dpois(x, lambda = rate), col="red")
p_seq <- seq(from = 0, to = 1, length = 100)
lot(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,10), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
p_seq <- seq(from = 0, to = 1, length = 100)
(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,10), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
rate <- 23
x <- 0:40 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2)")
## ------------------------------------------------------------------------
plot(x, ppois(x, lambda = rate), type="s", main = "Cumulative distribution function for Po(2)")
## ------------------------------------------------------------------------
plot(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,40), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
## ------------------------------------------------------------------------
draws <- rpois(99, lambda = rate)
hist(draws, breaks = (0:(max(draws)+1)) - 0.5, probability = TRUE, main = "Random draws from Po(s)")
points(x, dpois(x, lambda = rate), col="red")
rate <- 23
x <- 0:40 # with no upper limit we need to decide on an upper limit
plot(x, dpois(x, lambda = rate), main = "Probability mass function for Po(2)")
## ------------------------------------------------------------------------
plot(x, ppois(x, lambda = rate), type="s", main = "Cumulative distribution function for Po(2)")
## ------------------------------------------------------------------------
plot(p_seq, qpois(p_seq, lambda = rate), type="s", ylim=c(0,40), main = "Quantile function for Po(2)") # Change the y limits for comparison purposes
## ------------------------------------------------------------------------
draws <- rpois(999, lambda = rate)
hist(draws, breaks = (0:(max(draws)+1)) - 0.5, probability = TRUE, main = "Random draws from Po(s)")
points(x, dpois(x, lambda = rate), col="red")
a <- 0
b <- 1
# The curve function expects you to give a function of `x` and then it
# (internally) creates a sequence of values from `from` and to `to` and creates
# plots similar to what we had before, but using a line rather than points.
curve(dunif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='f(y)', main='Probability density function for Unif(0,1)')
curve(punif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='F(y)', main='Cumulative distribution function for Unif(0,1)')
curve(qunif(x, min = a, max = b), from = 0, to = 1,
xlab='p', ylab='F^{-1}(p)', main='Quantile function for Unif(0,1)')
random_uniforms <- runif(100, min = a, max = b)
hist(random_uniforms, probability = TRUE, main = "Random draws from Unif(0,1)")
curve(dunif(x, min = a, max = b), add = TRUE, col="red")
a <- 13
b <- 65
# The curve function expects you to give a function of `x` and then it
# (internally) creates a sequence of values from `from` and to `to` and creates
# plots similar to what we had before, but using a line rather than points.
curve(dunif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='f(y)', main='Probability density function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(punif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='F(y)', main='Cumulative distribution function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(qunif(x, min = a, max = b), from = 13, to = 65,
xlab='p', ylab='F^{-1}(p)', main='Quantile function for Unif(0,1)')
## ------------------------------------------------------------------------
random_uniforms <- runif(100, min = a, max = b)
hist(random_uniforms, probability = TRUE, main = "Random draws from Unif(0,1)")
curve(dunif(x, min = a, max = b), add = TRUE, col="red")
a <- 13
b <- 65
# The curve function expects you to give a function of `x` and then it
# (internally) creates a sequence of values from `from` and to `to` and creates
# plots similar to what we had before, but using a line rather than points.
curve(dunif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='f(y)', main='Probability density function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(punif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='F(y)', main='Cumulative distribution function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(qunif(x, min = a, max = b), from = -1, to = 2,
xlab='p', ylab='F^{-1}(p)', main='Quantile function for Unif(0,1)')
## ------------------------------------------------------------------------
random_uniforms <- runif(100, min = a, max = b)
hist(random_uniforms, probability = TRUE, main = "Random draws from Unif(0,1)")
curve(dunif(x, min = a, max = b), add = TRUE, col="red")
a <- 13
b <- 65
# The curve function expects you to give a function of `x` and then it
# (internally) creates a sequence of values from `from` and to `to` and creates
# plots similar to what we had before, but using a line rather than points.
curve(dunif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='f(y)', main='Probability density function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(punif(x, min = a, max = b), from = -1, to = 2,
xlab='y', ylab='F(y)', main='Cumulative distribution function for Unif(0,1)')
## ------------------------------------------------------------------------
curve(qunif(x, min = a, max = b), from = 0, to = 1,
xlab='p', ylab='F^{-1}(p)', main='Quantile function for Unif(0,1)')
## ------------------------------------------------------------------------
random_uniforms <- runif(999, min = a, max = b)
hist(random_uniforms, probability = TRUE, main = "Random draws from Unif(0,1)")
curve(dunif(x, min = a, max = b), add = TRUE, col="red")
random_uniforms <- runif(999, min = a, max = b)
hist(random_uniforms, probability = TRUE, main = "Random draws from Unif(13,65)")
curve(dunif(x, min = a, max = b), add = TRUE, col="red")
?curve
mu    <- 0
sigma <- 1 # standard deviation
curve(dnorm(x, mean = mu, sd = sigma), # notice the 3rd argument is the sd
from = -4, to = 4,
main = "PDF for a standard normal")
curve(pnorm(x, mean = mu, sd = sigma),
from = -4, to = 4,
main = "CDF for a standard normal",
ylab = "F(x)")
curve(qnorm(x, mean = mu, sd = sigma),
from = 0, to = 1,
main = "Quantile function for a standard normal")
draws <- rnorm(100, mean = mu, sd = sigma)
hist(draws, probability = TRUE)
curve(dnorm(x, mean = mu, sd = sigma), add = TRUE, col = "red")
n <- 13
p <- 0.7
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")
n <- 13
p <- 0.7
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")
?x
??x
n <- 13
p <- 0.7
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")
?dbinom
n <- 13
p <- 0.7
x <- 0:n
plot(x, dbinom(x, size = n, prob = p), main = "Probability mass function for Bin(13,0.7)")
# Three dice
die = c(1,2,2,3,3,4)
rolls = expand.grid(die1 = die, die2 = die, die3 = die)
sum = rowSums(rolls); tsum = table(sum)
dragonwood3 = data.frame(x = round(as.numeric(names(tsum)),0),
pmf = round(as.numeric(table(sum)/length(sum)),3)) %>%
mutate(cdf = cumsum(pmf))
t(dragonwood3)
?c()
